
Parsing:





Your program will be executed as follows:
./pipex file1 cmd1 cmd2 file2

It must take 4 arguments:
- file1 and file2 are file names.
- cmd1 and cmd2 are shell commands with their parameters.

It must behave exactly the same as the shell command below:
$> < file1 cmd1 | cmd2 > file2

Examples
$> ./pipex infile "ls -l" "wc -l" outfile
Should behave like: < infile ls -l | wc -l > outfile
$> ./pipex infile "grep a1" "wc -w" outfile
Should behave like: < infile grep a1 | wc -w > outfile

"< infile" is using the content of "infile" as input for the next command.
"ls -l" lists the files in the current directory in long format (details about permitions etc)
"| wc -l" takes the output of "ls -l" and counts the number of lines.

Bonus part
You will get extra points if you:
- Handle multiple pipes.
This:
$> ./pipex file1 cmd1 cmd2 cmd3 ... cmdn file2

Should behave like:
< file1 cmd1 | cmd2 | cmd3 ... | cmdn > file2

- Support « and » when the first parameter is "here_doc".
This:
$> ./pipex here_doc LIMITER cmd cmd1 file

Should behave like:
cmd << LIMITER | cmd1 >> file
